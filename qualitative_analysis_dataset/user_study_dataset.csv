D1,D2,D3,D4,P-I-Task-1_1,P-I-Task-1_2,P-I-Task-2_1,P-I-Task-2_2,P-I-Task-3_1,P-I-Task-3_2,P-I-Task-4_1,P-I-Task-4_2,P-II-Task-1_1,P-II-Task-1_3,P-II-Task-2_1,P-II-Task-2_3,P-II-Task-3_1,P-II-Task-3_3,P-II-Task-4_1,P-II-Task-4_3,U1_1,U1-E,U2_1,U2-E,U3_1,U3-E,U4_1,U5,U6
What is your current occupation?,What is the highest level of education you have completed?,What was your major?,What is your latest role in software development?,Identify problematic libraries found in CVE-BINARY-ANALYZER - Which library you found the most problematic?,"Identify problematic libraries found in CVE-BINARY-ANALYZER - Time spent without using InitScope (you may use FaaSLight) [in minutes, out of max 20 minutes]",Locate the inefficiency - Where you found the inefficient library usage? (filename: lineno),"Locate the inefficiency - Time spent without using InitScope (you may use FaaSLight) [in minutes, out of max 20 minutes]",Classify inefficiency pattern - Which category of inefficiency detected? (such as C1/C2/C3/C4),"Classify inefficiency pattern - Time spent without using InitScope (you may use FaaSLight) [in minutes, out of max 20 minutes]",Recommend optimization - How do you recommend to optimize the inefficiency? (such as Remove/Replace/Lazy load library),"Recommend optimization - Time spent without using InitScope (you may use FaaSLight) [in minutes, out of max 20 minutes]",Identify problematic libraries found in CVE-BINARY-ANALYZER - Which library you found the most problematic?,"Identify problematic libraries found in CVE-BINARY-ANALYZER - Time spent while using InitScope [in minutes, out of max 20 minutes]",Locate the inefficiency - Where you found the inefficient library usage? (filename: lineno),"Locate the inefficiency - Time spent while using InitScope [in minutes, out of max 20 minutes]",Classify inefficiency pattern - Which category of inefficiency detected? (such as C1/C2/C3/C4),"Classify inefficiency pattern - Time spent while using InitScope [in minutes, out of max 20 minutes]",Recommend optimization - How do you recommend to optimize the inefficiency? (such as Remove/Replace/Lazy load library),"Recommend optimization - Time spent while using InitScope [in minutes, out of max 20 minutes]",How satisfied you are with InitScope in identifying problematic libraries and modules? - 1,Why did you choose the above rating? Please explain concisely in one sentence.,Does InitScope helps localizing inefficiency? - 1,Why did you choose the above rating? Please explain concisely in one sentence.,Do you find InitScope helpful in code optimization? (How helpful are the inefficiency categorization and code optimizer?) - 1,Why did you choose the above rating? Please explain concisely in one sentence.,Do you perceive InitScope as scalable in optimizing more complex serverless applications? - 1,What are the limitations of InitScope you observed in mitigating cold-start issues?,What additional features do you wish to see in InitScope?
Software Engineer,Masters,Computer and Information Science,Software Developer,jinja2,12,applications/cve_binary_analyzer/original/dependencies/cve_bin_tool/output_engine/print_mode.py : 9,15,C4,16,Remove,7,igraph.drawing,1,applications/rainbowcake_graph_bfs/original/dependencies/igraph/clustering.py: 11,2,C1,3,Disable,1,Useful,Because you can identify problematic libraries quickly without wasting any time,Very useful,Yes it does as it shows the score ,Useful,It clearly categorizes inefficiencies and hence can help in code optimization by either removing or replacing ,Useful,Maybe cannot be used on a large scale,In the future maybe it could show the inefficiency categorizations
Software Engineer,Masters,Computer Science,"General Manager, Technology",plotly,17,applications/cve_binary_analyzer/original/dependencies/plotly/graph_objects/__init__.py:137,8,C4,8,Plotly is heavy and unnecessary for visualization in a serverless application. we could have used matplotlib instead if needed at all,5,xmlschema,3,applications/cve_binary_analyzer/original/dependencies/cve_bin_tool/validator.py:11,5,c3,3,"Rather than using heavy xmlschema library, we could have used lighter alternative like lxml",7,Very useful,"Nowadays, application modernization has become a buzzword, with major organizations like AWS and Red Hat offering automated solutions. One key aspect of modernization is going serverless, alongside other strategies like migration. In this process, identifying and eliminating inefficient libraries is a crucial task.",Useful,"The tool include the 'Module Tree by Dot' view, this is very useful to locate the problematic library by score",Useful,"Once the category of inefficiencies are identified, optimizer can be used to optimize the code (removing, replacing, etc.) by identified categories",Very useful,"I thought the tool might fail to suggest avoiding libraries like Plotly and instead only capturing and storing information (e.g., in S3 or another data store). Ideally, it should recommend storing data for later visualization using built-in cloud services like QuickSight rather than using inefficient libraries within the serverless function itself.",It shold suggest alternatives automatically and may use Gen AI to suggest this
Adjunct Lecturer,Bachelors,Computer Science and Engineering,Software Engineer,OpenSSL,20,SSL_write,18,C2,19,Lazy,18,libpng,17,SSL_write,12,C1,13,Remove,11,Neural,Usability,Useful,It identifies inefficiency almost accurately,Useful,Categorization and optimization were satisfactory,Neural,Usability,Easy UI
Software Engineer,Bachelors,CSE,Frontend Engineer,async_timeout,3,applications/cve_binary_analyzer/original/dependencies/aiohttp/helpers.py: 57,3,C2,12,Lazy load library,4,elementpath.datatypes,2,applications/cve_binary_analyzer/original/dependencies/cve_bin_tool/validator.py: 12,8,C1,1,Remove library,2,Useful,The results are shown in a very clear and sorted manner with numerical values to quickly identify inefficiency.,Not useful,It took me a while to climb up the module tree to find the exact path that uses the inefficient library.,Useful,"Yes, after identifying the problematic imports, the categories help to take necessary measures",Useful,Nothing in particular,"A webapp with dashboard, for realtime monitoring production level codebase. Seamless connection with GitHub repos."
Student,Masters,Computer and Information Science,Software Developer,"cryptography (I manually check the folder size of each library in dependencies and found this one has the largest size, so I figure this one would cause most loading time)",7,"cve_binary_analyzer/original/dependencies/google/auth/crypt/_cryptography_rsa.py:22 (I download all the code and execute grep -rn 'cryptograph' to find all the code files that use this library, then I seleted thsi one among all the files)",4,C3,2,"Replace it with other alternative cryptograph libraries such as PyCryptodome, PyOpenSSL, and cryptopy. I recommend the developer to use a lighter library to reduce the load time",2,xmlschema,2,cve_binary_analyzer/original/dependencies/cve_bin_tool /validator.py:11,4,C2,2,Lazy-loaded,1,Very useful,InitScope significantly reduce the time that developers take to manually analyze what library is the most problematic one,Very useful,"InitScope directly gives the code file which use the library, reducing the unnecessary time for searching in the large code base",Very useful,"InitScope gives four inefficiency categorization, which covers most of the typical inefficiencies",Useful,"Although InitScope significantly reduces the time of identifying inefficiencies,  it still requires developers to navigate the code files, which might take more time when facing large and complex serverless applications that have a lot of files. ","1) Gives suggested libraries to replace when the existing library is too heavy. 2) Make the UI more user-friendly, as the current UI has some terms that require developers to have a specific background (e.g., what is CCT, what is Cumulative Samples by Dot). This incurs a learning curve for developers."
Research Assistant,Bachelors,Software Engineering,Android Engineer Developer,xmlschema,8,xmlschema/validators/__init.py,5,C1,5-10,Remove,5,xmlschema,2,xmlschema/validators/__init.py,10 Seconds,C1,10 Seconds,Remove,5 Seconds,Useful,"InitScope provides a good overview of inefficiencies, but deeper analysis is sometimes needed to catch context-dependent or hidden performance issues.",Very useful,"Provide developers with detailed insights into module efficiency, usage patterns, and import times that have led to significant improvements.",Neural,The detection is good but the visualization can be better for identification something with dependenies graph. ,Useful,The user experience is a bit challenging although its providing good answers. B,Startup performance assessment options from InitScope reveal delayed startup areas although they provide minimal assistance for solving these issues 
Graduate Student ,Bachelors,Artificial intelligence,Associate Data Scientist,rich,18,/cve_binary_analyzer/original/dependencies/rich/__init__.py  : 46,10,C4,8,Remove,6,elementpath.datatypes,4,InitScope/blob/main/applications/cve_binary_analyzer/original/dependencies/elementpath/__init__.py : 23,3,C2,3,Lazy load library,2,Very useful,InitScope clearly showed which imports caused delays visually.,Very useful,"InitScope clearly showed the file paths causing inefficiencies, making it easy to pinpoint the exact source.",Very useful,"The categorization made it easy to understand the issues, and the optimizer gave clear suggestions to improve the code.",Very useful,Visual output can be hard to follow in large projects.,InitScope could be improved with AI to automatically suggest fixes based on similar code patterns and past optimizations.
